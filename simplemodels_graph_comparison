import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
import pandas as pd

# Load the dataset from CSV file
file_path = 'Housing.csv'
housing_data = pd.read_csv(file_path)

# Convert categorical variables to numerical using one-hot encoding
housing_data = pd.get_dummies(housing_data, columns=['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea', 'furnishingstatus'])

# Define features and target variable
X = housing_data.drop('price', axis=1)
y = housing_data['price']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize models
models = {
    "Linear Regression": LinearRegression(),
    "Multiple Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(random_state=0),
    "Random Forest": RandomForestRegressor(random_state=0),
    "KNN": KNeighborsRegressor(),
    "SVR": SVR(),
    "XGBoost": XGBRegressor(objective='reg:squarederror', random_state=0)
}

# Train and evaluate each model
mse_values = {}
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mse_values[name] = mse

# Convert the dictionary to a DataFrame
mse_df = pd.DataFrame.from_dict(mse_values, orient='index', columns=['MSE'])

# Sort the DataFrame based on MSE values
mse_df_sorted = mse_df.sort_values(by='MSE')

# Plotting the 2-D column chart
plt.figure(figsize=(10, 6))
bars = plt.bar(mse_df_sorted.index, mse_df_sorted['MSE'], color='skyblue')

# Adding the MSE values on top of each column
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), va='bottom')

plt.xlabel('Models')
plt.ylabel('Mean Squared Error (MSE)')
plt.title('Mean Squared Error (MSE) for Different Models')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
